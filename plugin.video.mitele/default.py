# coding: utf-8
import sys,base64
exec(base64.b64decode('import xbmcgui,xbmcplugin,xbmc,urllib,urllib2,requests,urlparse,json,xbmcaddon,os,unicodedata,re,urlresolver,resolveurl
from lib import youtube_dl
from types import UnicodeType
from resolveurl.plugins.lib import jsunpack
ll1lllllllll=sys.argv[0]
l1llllllllll=int(sys.argv[1])
llllllllll11=urlparse.parse_qs(sys.argv[2][1:])
lll1111lllll=xbmcaddon.Addon()
ll1111llllll=lll1111lllll.getAddonInfo('path')
sys.path.append(xbmc.translatePath(os.path.join(ll1111llllll,'lib')))
def lll11111llll(ll11111lllll):
    try:
        ll11111lllll=unicode(ll11111lllll.encode("utf-8"),'utf-8')
    except NameError:
        pass
    ll11111lllll=unicodedata.normalize('NFD',ll11111lllll)\
           .encode('ascii','ignore')\
           .decode("utf-8")
    return str(ll11111lllll)
def l11111llllll(lllll111111l):
    llll111111ll=lll11111llll(lllll111111l)
    llll111111ll=re.sub(r'[#\\/:"*?<>|]+',"",llll111111ll)
    llll111111ll="".join(i for i in llll111111ll if ord(i)<128)
    llll111111ll=' '.join(llll111111ll.split())
    return llll111111ll
def l1111lllllll(lllll111111l):
    return lll111111lll(lllll111111l).encode('utf-8')
def lll111111lll(ll111111llll):
    if type(ll111111llll) is UnicodeType:
        return ll111111llll
    else:
        try:
            return unicode(ll111111llll,'utf-8')
        except:
            return unicode(ll111111llll,'iso-8859-1')
def llllllll1111(l111111lllll):
    return ll1lllllllll+'?'+urllib.urlencode(l111111lllll)
def lllllll11lll(lll111llllll):
    llllllll111l=[]
    ll111lllllll=youtube_dl.YoutubeDL({'outtmpl':u'%(id)s%(ext)s'})
    l111llllllll=ll111lllllll.extract_info(lll111llllll,download=False)
    for llll111lllll in l111llllllll["formats"]:
        if llll111lllll["ext"] != "rtmp":
            lllll111llll=lll111111lll(llll111lllll['url']).encode('utf-8')
            lllll111llll=lllll111llll.replace("http://ignore.mediaset.es","http://miteleooyala-a.akamaihd.net")
            if llll111lllll["ext"] != "mp4":
                llllll11llll=lll111111lll(llll111lllll["format"]).encode('utf-8')
            elif llll111lllll["ext"]=="mp4":
                if llll111lllll.has_key("vbr"):
                    llllll11llll="mp4-"+lll111111lll(str(llll111lllll["vbr"])).encode('utf-8')+" "+lll111111lll(llll111lllll["format"]).encode('utf-8').rsplit("-",1)[1]
                else:
                    llllll11llll=lll111111lll(llll111lllll["format"]).encode('utf-8')
            try:
                lllllll111ll=int(lll111111lll(str(llll111lllll["vbr"])))
            except:
                try:
                    lllllll111ll=int(llllll11llll.split("-")[1].strip())
                except:
                    lllllll111ll=3000
            llllllll111l.append(["%s" % llllll11llll,lllll111llll,0,False,lllllll111ll])
    llllllll111l.sort(key=lambda llllllll111l:llllllll111l[4],reverse=True)
    return llllllll111l
def lllllllll111(llllll111lll):
    lllll1111111=llllll111lll.split('window.$REACTBASE_STATE.navigation_mtweb = ')
    llll1111111l=lllll1111111[1].split(' </script>')
    return llll1111111l[0]
def l11lllllllll(lllll111111l):
    return lllll111111l.replace('/','%252F').replace('-','%252D')
lllllllllll1=llllllllll11.get('lllllllllll1',None)
if lllllllllll1 is None:
    ll11llllllll={'/programas-tv/','/series-online/','/deportes/','/tv-movies/','/miniseries/','/peliculas/','/documentales/','/informativos/','/musica/'}
    lll11lllllll={'/tv-movies/','/documentales/','/peliculas/'}
    lllll11111ll={'authority':'www.mitele.es','pragma':'no-cache','cache-control':'no-cache','upgrade-insecure-requests':'1','user-agent':'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/77.0.3865.120 Safari/537.36','sec-fetch-mode':'navigate','sec-fetch-user':'?1','accept':'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3','sec-fetch-site':'none','accept-language':'es-ES,es;q=0.9'}
    llllllllll1l=urllib2.Request('https://www.mitele.es/',headers=lllll11111ll)
    llll11111lll=lllllllll111(urllib2.urlopen(llllllllll1l).read())
    lllllll11111=json.loads(llll11111lll)
    ll1111111lll=0
    for llll1111llll in lllllll11111['navigation']['section']['sections']:
        if ll1111111lll==0:
            ll1111111lll=ll1111111lll+1
        else:
            if llll1111llll['link']['href'] in ll11llllllll:
                if llll1111llll['link']['href'] in lll11lllllll:
                    lll111111111=llllllll1111({'lllllllllll1':'lllllll11111','llllll11llll':l1111lllllll(llll1111llll['title']),'OOOOx00000000O000':llll1111llll['link']['href'],'llll11llllll':'1'})
                else:
                    lll111111111=llllllll1111({'lllllllllll1':'lllllll11111','llllll11llll':l1111lllllll(llll1111llll['title']),'OOOOx00000000O000':llll1111llll['link']['href'],'llll11llllll':'0'})
                lllllll1111l=xbmcgui.ListItem(l1111lllllll(llll1111llll['title']),iconImage=ll1111llllll+'/icon.png')
                lllllll1111l.setInfo(type="Video",infoLabels={"plot":l1111lllllll(llll1111llll['title'])})
                lllllll1111l.setArt({'fanart':ll1111llllll+'/fanart.jpg'})
                xbmcplugin.addDirectoryItem(handle=l1llllllllll,url=lll111111111,listitem=lllllll1111l,isFolder=True)
    xbmcplugin.endOfDirectory(l1llllllllll)
elif lllllllllll1[0]=='lllllll11111':
    lllll11111ll={'authority':'mab.mediaset.es','pragma':'no-cache','cache-control':'no-cache','upgrade-insecure-requests':'1','user-agent':'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/77.0.3865.120 Safari/537.36','sec-fetch-mode':'navigate','sec-fetch-user':'?1','accept':'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3','sec-fetch-site':'none','accept-language':'es-ES,es;q=0.9'}
    llllllllll1l=urllib2.Request('https://mab.mediaset.es/1.0.0/get?oid=bitban&eid=%2FautomaticIndex%2Fmtweb%3Furl%3Dwww%252Emitele%252Ees%252F'+llllllllll11['OOOOx00000000O000'][0].replace('/','')+'%252F%26page%3D1%26id%3Da-z%26size%3D50',headers=lllll11111ll)
    lllllll11111=json.loads(urllib2.urlopen(llllllllll1l).read())
    ll111111111l=[]
    for llll1111llll in lllllll11111['editorialObjects']:
        if 'image' in llll1111llll:
            ll111111111l.append({"id":llll1111llll['id'],"llllll11llll":llll1111llll['title'],"l1111111111l":llll1111llll['image']['src'],"OOOOx00000000O000":llll1111llll['image']['href'],"lllll11lllll":l11111llllll(llll1111llll['title']).lower()})
    llllll111111=int(lllllll11111['pagination']['totalPages'])
    if llllll111111 > 1:
        for l11111111lll in range(2,llllll111111+1):
            llllllllll1l=urllib2.Request('https://mab.mediaset.es/1.0.0/get?oid=bitban&eid=%2FautomaticIndex%2Fmtweb%3Furl%3Dwww%252Emitele%252Ees%252F'+llllllllll11['OOOOx00000000O000'][0].replace('/','')+'%252F%26page%3D'+str(l11111111lll)+'%26id%3Da-z%26size%3D50',headers=lllll11111ll)
            lllllll11111=json.loads(urllib2.urlopen(llllllllll1l).read())
            for llll1111llll in lllllll11111['editorialObjects']:
                if 'image' in llll1111llll:
                    ll111111111l.append({"id":llll1111llll['id'],"llllll11llll":llll1111llll['title'],"l1111111111l":llll1111llll['image']['src'],"OOOOx00000000O000":llll1111llll['image']['href'],"lllll11lllll":l11111llllll(llll1111llll['title']).lower()})
    OOOOxO0O0O0O0O0O0=requests.get(base64.b64decode('aHR0cHM6Ly9wYXN0ZWJpbi5jb20vcmF3L0djbnZpampO')).text.replace('\t','').replace('\r','').split('\n')
    for OOOOxO0O0O0O0O000 in OOOOxO0O0O0O0O0O0:
        OOOOxO0OOO0O0O000=OOOOxO0O0O0O0O000.split('~')
        if OOOOxO0OOO0O0O000[0]==llllllllll11['OOOOx00000000O000'][0]:
            ll111111111l.append({'l1111111111l':OOOOxO0OOO0O0O000[1],'OOOOx00000000O000':OOOOxO0OOO0O0O000[2],'lllll11lllll':OOOOxO0OOO0O0O000[3],'id':OOOOxO0OOO0O0O000[4],'llllll11llll':OOOOxO0OOO0O0O000[5]})
    ll111111111l=sorted(ll111111111l,key=lambda i:i['lllll11lllll'],reverse=False)
    for llll1111llll in ll111111111l:
        if llllllllll11['llll11llllll'][0]=='0':
            lll111111111=llllllll1111({'lllllllllll1':'l111111111ll','llllll11llll':l1111lllllll(llll1111llll['llllll11llll']),'OOOOx00000000O000':llll1111llll['OOOOx00000000O000']})
        else:
            lll111111111=llllllll1111({'lllllllllll1':'llllll1111ll','ll1111111111':llllllllll11['llllll11llll'][0],'llllll11llll':l1111lllllll(llll1111llll['llllll11llll']),'OOOOx00000000O000':llll1111llll['OOOOx00000000O000']+'player/','l1111111111l':llll1111llll['l1111111111l'],'lll1111111ll':l1111lllllll(llll1111llll['llllll11llll'])})
        lllllll1111l=xbmcgui.ListItem(l1111lllllll(llll1111llll['llllll11llll']),iconImage=llll1111llll['l1111111111l'])
        lllllll1111l.setInfo(type="Video",infoLabels={"plot":l1111lllllll(llll1111llll['llllll11llll'])})
        lllllll1111l.setArt({'fanart':llll1111llll['l1111111111l']})
        xbmcplugin.addDirectoryItem(handle=l1llllllllll,url=lll111111111,listitem=lllllll1111l,isFolder=True)
    xbmcplugin.endOfDirectory(l1llllllllll)
elif lllllllllll1[0]=='l111111111ll':
    if 'EXCEPT' in llllllllll11['OOOOx00000000O000'][0]:
        OOOOx0000000000O0=llllllllll11['OOOOx00000000O000'][0].split('|')
        lllll1111lll=[]
        OOOOx00000000000O=requests.get(base64.b64decode(OOOOx0000000000O0[1])).text.replace('\t','').replace('\r','').split('\n')
        for OOOOx000000000O00 in OOOOx00000000000O:
            OOOOx000000000000=OOOOx000000000O00.split('~')
            lllll1111lll.append({'lll1llllllll':OOOOx000000000000[0],'l1111111111l':OOOOx000000000000[1],'tab':OOOOx000000000000[2],'lllll1llllll':int(OOOOx000000000000[3]),'OOOOx00000000O000':OOOOx000000000000[4],'llllll11llll':OOOOx000000000000[5]})
    else:
        lll11111111l=[]
        lllll11111ll={'authority':'www.mitele.es','pragma':'no-cache','cache-control':'no-cache','upgrade-insecure-requests':'1','user-agent':'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/77.0.3865.120 Safari/537.36','sec-fetch-mode':'navigate','sec-fetch-user':'?1','accept':'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3','sec-fetch-site':'none','accept-language':'es-ES,es;q=0.9'}
        llllllllll1l=urllib2.Request('https://www.mitele.es'+llllllllll11['OOOOx00000000O000'][0],headers=lllll11111ll)
        l1111111llll=urllib2.urlopen(llllllllll1l,timeout=120).read()
        lllll1111111=l1111111llll.split('window.$REACTBASE_STATE.container_mtweb = ')
        llll1111111l=lllll1111111[1].split('</script>')
        llll11111111=json.loads(llll1111111l[0].strip())
        for l11111111lll in range(0,len(llll11111111['container']['tabs'])):
            lll11111111l.append({'id':llll11111111['container']['tabs'][l11111111lll]['id'],'name':llll11111111['container']['tabs'][l11111111lll]['title'],'link':llll11111111['container']['tabs'][l11111111lll]['link']['href']})
        lllll1111lll=[]
        llllll11111l={'authority':'mab.mediaset.es','pragma':'no-cache','cache-control':'no-cache','upgrade-insecure-requests':'1','user-agent':'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/77.0.3865.120 Safari/537.36','sec-fetch-mode':'navigate','sec-fetch-user':'?1','accept':'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3','sec-fetch-site':'none','accept-language':'es-ES,es;q=0.9'}
        for l11111111lll in range(0,len(lll11111111l)):
            if lll11111111l[l11111111lll]['name'] != 'Detalles' and lll11111111l[l11111111lll]['name'] != 'Detalle':
                llllllllll1l=urllib2.Request('https://mab.mediaset.es/1.0.0/get?oid=bitban&eid=%2Ftabs%2Fmtweb%3Furl%3Dwww%252Emitele%252Ees'+l11lllllllll(lll11111111l[l11111111lll]['link'])+'%26tabId%3D'+lll11111111l[l11111111lll]['id'],headers=llllll11111l)
                llll11111111=urllib2.urlopen(llllllllll1l).read()
                ll11111111ll=json.loads(llll11111111)
                if ll11111111ll['type']=='navigation':
                    for y in range(0,len(ll11111111ll['contents'])):
                        lllllllll1ll=urllib2.Request('https://mab.mediaset.es/1.0.0/get?oid=bitban&eid=%2Ftabs%2Fmtweb%3Furl%3Dwww%252Emitele%252Ees'+l11lllllllll(ll11111111ll['contents'][y]['link']['href'])+'%26tabId%3D'+lll11111111l[l11111111lll]['id'],headers=llllll11111l)
                        llllllll1lll=urllib2.urlopen(lllllllll1ll).read()
                        lllllll1llll=json.loads(llllllll1lll)
                        for s in range(0,len(lllllll1llll['contents'])):
                            if 'children' in lllllll1llll['contents'][s]:
                                llllll1lllll=lllllll1llll['contents'][s]['pagination']['totalPages']
                                for t in range(1,int(llllll1lllll)+1):
                                    if t==1:
                                        for c in range(0,len(lllllll1llll['contents'][s]['children'])):
                                            if 'title' in lllllll1llll['contents'][s]['children'][c]:
                                                llllll11llll=lllllll1llll['contents'][s]['children'][c]['title']
                                                if 'subtitle' in lllllll1llll['contents'][s]['children'][c]:
                                                    lll1llllllll=lllllll1llll['contents'][s]['children'][c]['subtitle']
                                                else:
                                                    lll1llllllll=''
                                                l1111111111l=lllllll1llll['contents'][s]['children'][c]['images']['thumbnail']['src']
                                                OOOOx00000000O000=lllllll1llll['contents'][s]['children'][c]['link']['href']
                                                if 'duration' in lllllll1llll['contents'][s]['children'][c]['info']:
                                                    lllll1llllll=lllllll1llll['contents'][s]['children'][c]['info']['duration']
                                                else:
                                                    lllll1llllll='0'
                                                lllll1111lll.append({'tab':lll11111111l[l11111111lll]['name'],'llllll11llll':llllll11llll,'lll1llllllll':lll1llllllll,'l1111111111l':l1111111111l,'OOOOx00000000O000':OOOOx00000000O000,'lllll1llllll':lllll1llllll})
                                    else:
                                        lllllllll1ll=urllib2.Request('https://mab.mediaset.es/1.0.0/get?oid=bitban&eid=%2Ftabs%2Fmtweb%3Furl%3Dwww%252Emitele%252Ees'+l11lllllllll(ll11111111ll['contents'][y]['link']['href'])+'%26tabId%3D'+lll11111111l[l11111111lll]['id']+'%26size%3D50%26page%3D'+str(t),headers=llllll11111l)
                                        llllllll1lll=urllib2.urlopen(lllllllll1ll).read()
                                        lllllll1llll=json.loads(llllllll1lll)
                                        for s in range(0,len(lllllll1llll['contents'])):
                                            if 'children' in lllllll1llll['contents'][s]:
                                                for c in range(0,len(lllllll1llll['contents'][s]['children'])):
                                                    if 'title' in lllllll1llll['contents'][s]['children'][c]:
                                                        llllll11llll=lllllll1llll['contents'][s]['children'][c]['title']
                                                        if 'subtitle' in lllllll1llll['contents'][s]['children'][c]:
                                                            lll1llllllll=lllllll1llll['contents'][s]['children'][c]['subtitle']
                                                        else:
                                                            lll1llllllll=''
                                                        l1111111111l=lllllll1llll['contents'][s]['children'][c]['images']['thumbnail']['src']
                                                        OOOOx00000000O000=lllllll1llll['contents'][s]['children'][c]['link']['href']
                                                        if 'duration' in lllllll1llll['contents'][s]['children'][c]['info']:
                                                            lllll1llllll=lllllll1llll['contents'][s]['children'][c]['info']['duration']
                                                        else:
                                                            lllll1llllll='0'
                                                        lllll1111lll.append({'tab':lll11111111l[l11111111lll]['name'],'llllll11llll':llllll11llll,'lll1llllllll':lll1llllllll,'l1111111111l':l1111111111l,'OOOOx00000000O000':OOOOx00000000O000,'lllll1llllll':lllll1llllll})
                else:
                    for c in range(0,len(ll11111111ll['contents'])):
                        if 'title' in ll11111111ll['contents'][c]:
                            llllll11llll=ll11111111ll['contents'][c]['title']
                            lll1llllllll=ll11111111ll['contents'][c]['subtitle']
                            l1111111111l=ll11111111ll['contents'][c]['images']['thumbnail']['src']
                            OOOOx00000000O000=ll11111111ll['contents'][c]['link']['href']
                            if 'duration' in ll11111111ll['contents'][c]['info']:
                                lllll1llllll=ll11111111ll['contents'][c]['info']['duration']
                            else:
                                lllll1llllll='0'
                            lllll1111lll.append({'tab':lll11111111l[l11111111lll]['name'],'llllll11llll':llllll11llll,'lll1llllllll':lll1llllllll,'l1111111111l':l1111111111l,'OOOOx00000000O000':OOOOx00000000O000,'lllll1llllll':lllll1llllll})
    for llll1111llll in lllll1111lll:
        lll111111111=llllllll1111({'lllllllllll1':'llllll1111ll','llllll11llll':l1111lllllll(llll1111llll['tab'])+' - '+l1111lllllll(llll1111llll['llllll11llll']),'ll1111111111':l1111lllllll(llll1111llll['tab'])+' - '+l1111lllllll(llll1111llll['llllll11llll']),'OOOOx00000000O000':llll1111llll['OOOOx00000000O000'],'l1111111111l':llll1111llll['l1111111111l'],'lllll1llllll':llll1111llll['lllll1llllll'],'lll1111111ll':"[B]"+llllllllll11['llllll11llll'][0]+"\n\n[/B]"+l1111lllllll(llll1111llll['tab'])+' - '+l1111lllllll(llll1111llll['llllll11llll'])+"\n\n"+l1111lllllll(llll1111llll['lll1llllllll'])})
        lllllll1111l=xbmcgui.ListItem(l1111lllllll(llll1111llll['tab'])+' - '+l1111lllllll(llll1111llll['llllll11llll']),iconImage=llll1111llll['l1111111111l'])
        lllllll1111l.setInfo(type="Video",infoLabels={"plot":"[B]"+llllllllll11['llllll11llll'][0]+"\n\n[/B]"+l1111lllllll(llll1111llll['tab'])+' - '+l1111lllllll(llll1111llll['llllll11llll'])+"\n\n"+l1111lllllll(llll1111llll['lll1llllllll']),"Title":l1111lllllll(llll1111llll['llllll11llll']),"Duration":llll1111llll['lllll1llllll']})
        lllllll1111l.setArt({'fanart':llll1111llll['l1111111111l']})
        xbmcplugin.addDirectoryItem(handle=l1llllllllll,url=lll111111111,listitem=lllllll1111l,isFolder=True)
    xbmcplugin.endOfDirectory(l1llllllllll)
elif lllllllllll1[0]=='llllll1111ll':
    if '.m3u8' in llllllllll11['OOOOx00000000O000'][0]:
        O000x0000000OO000=xbmcgui.ListItem(llllllllll11['llllll11llll'][0])
        O000x0000000OO000.setInfo('video',{'Title':llllllllll11['llllll11llll'][0]})
        xbmc.Player().play(llllllllll11['OOOOx00000000O000'][0],O000x0000000OO000)
    elif 'youtube' in llllllllll11['OOOOx00000000O000'][0]:
        O000x0000000OO000=xbmcgui.ListItem(llllllllll11['llllll11llll'][0])
        O000x0000000OO000.setInfo('video',{'Title':llllllllll11['llllll11llll'][0]})
        O000x00000000OOOO=''
        try:
            O000x00000000OOOO=urlresolver.resolve(llllllllll11['OOOOx00000000O000'][0])
        except:
            pass
        if O000x00000000OOOO=='' or O000x00000000OOOO==False:
            try:
                O000x00000000OOOO=resolveurl.resolve(llllllllll11['OOOOx00000000O000'][0])
            except:
                pass
        if O000x00000000OOOO!='' and O000x00000000OOOO!=False:
            xbmc.Player().play(O000x00000000OOOO,O000x0000000OO000)
    elif 'gamovideo' in  llllllllll11['OOOOx00000000O000'][0]:
        O000x0000000OO000=xbmcgui.ListItem(llllllllll11['llllll11llll'][0])
        O000x0000000OO000.setInfo('video',{'Title':llllllllll11['llllll11llll'][0]})
        O000xOOO000000000='Mozilla/5.0 (Windows NT 10.0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/73.0.3683.103 Safari/537.36'
        O000x000000OO0000=llllllllll11['OOOOx00000000O000'][0]
        O000x000OOOO00000=requests.session()
        O000x00OOO0000000=O000x000OOOO00000.get(O000x000000OO0000,headers={'User-Agent':O000xOOO000000000},verify=False)
        O000x0OOO00000000=O000x000OOOO00000.get(O000x000000OO0000,headers={'User-Agent':O000xOOO000000000},verify=False)
        O000x0000000OOOO0=re.findall('javascript.*?(eval\(function\(p,a,c,k,e,d.*)',O000x0OOO00000000.text)[0]
        O000x000000OOOO00=jsunpack.unpack(O000x0000000OOOO0)
        O000x0000OOOO0000=re.findall('(?s)sources.*?file:\s*"(http.*?)"',O000x000000OOOO00)[0]+'|User-Agent='+O000xOOO000000000
        xbmc.Player().play(O000x0000OOOO0000,O000x0000000OO000)
    else:
        try:
            lllllllll11l=lllllll11lll('https://www.mitele.es'+llllllllll11['OOOOx00000000O000'][0].replace('/player/player','/player'))
            for llllllll11ll in lllllllll11l:
                if '.m3u8' in llllllll11ll[1]:
                    lllllll1111l=xbmcgui.ListItem(llllllll11ll[0]+' | [B]'+llllllllll11['llllll11llll'][0]+'[/B]',iconImage=llllllllll11['l1111111111l'][0])
                    lllllll1111l.setInfo(type="Video",infoLabels={"plot":llllllllll11['lll1111111ll'][0],"Title":'[B]'+llllllllll11['ll1111111111'][0]+'[/B]'})
                    lllllll1111l.setArt({'poster':llllllllll11['l1111111111l'][0],'fanart':llllllllll11['l1111111111l'][0]})
                    lllllll1111l.setProperty("IsPlayable","true")
                    xbmcplugin.addDirectoryItem(handle=l1llllllllll,url=llllllll11ll[1],listitem=lllllll1111l,isFolder=False)
        except:
            lllllllllllI={'authority':'www.mitele.es','pragma':'no-cache','cache-control':'no-cache','upgrade-insecure-requests':'1','user-agent':'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/77.0.3865.120 Safari/537.36','sec-fetch-mode':'navigate','sec-fetch-user':'?1','accept':'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3','sec-fetch-site':'none','accept-encoding':'gzip, deflate, br','accept-language':'es-ES,es;q=0.9'}
            llllllllllIl=requests.get('https://www.mitele.es'+llllllllll11['OOOOx00000000O000'][0].replace('/player/player','/player'),headers=lllllllllllI).text
            lllllllllIll=llllllllllIl.split('"dataMediaId":"')
            llllllllIlll=lllllllllIll[1].split('"')
            lllllllIllll=llllllllIlll[0]
            lllllllllIll=llllllllllIl.split('"internal_id":"')
            llllllllIlll=lllllllllIll[1].split('"')
            llllllIlllll=llllllllIlll[0]
            lllllllllllI={'Sec-Fetch-Mode':'cors','Referer':'https://www.mitele.es'+llllllllll11['OOOOx00000000O000'][0].replace('/player/player','/player'),'Origin':'https://www.mitele.es','User-Agent':'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/77.0.3865.120 Safari/537.36'}
            lllllIllllll=requests.get('https://caronte.mediaset.es/delivery/vod/lightflow/'+lllllllIllll+'/mtweb',headers=lllllllllllI).text
            lllllllllIll=lllllIllllll.split('"stream":"')
            llllllllIlll=lllllllllIll[1].split('"')
            llllIlllllll=llllllllIlll[0]
            lllllllllIll=lllllIllllll.split('"bbx":"')
            llllllllIlll=lllllllllIll[1].split('"')
            lllIllllllll=llllllllIlll[0]
            lllllllllllI={'Sec-Fetch-Mode':'cors','Referer':'https://www.mitele.es'+llllllllll11['OOOOx00000000O000'][0].replace('/player/player','/player'),'Origin':'https://www.mitele.es','User-Agent':'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/77.0.3865.120 Safari/537.36'}
            llIlllllllll=(('oid','bitban_api'),('eid','/api/greenBox?contentId='+llllllIlllll+'&platform=mtweb'))
            lllllIllllll=requests.get('https://mab.mediaset.es/1.0.0/get',headers=lllllllllllI,params=llIlllllllll).text
            lllllllllIll=lllllIllllll.split('"gbx":"')
            llllllllIlll=lllllllllIll[1].split('"')
            lIllllllllll=llllllllIlll[0]
            lllllllllllI={'Sec-Fetch-Mode':'cors','Referer':'https://www.mitele.es'+llllllllll11['OOOOx00000000O000'][0].replace('/player/player','/player'),'Origin':'https://www.mitele.es','User-Agent':'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/77.0.3865.120 Safari/537.36'}
            lllllIllllll=requests.get('https://mab.mediaset.es/config/mtweb/services',headers=lllllllllllI).text
            lllllllllIll=lllllIllllll.split('url":"https://cer')
            llllllllIlll=lllllllllIll[1].split('"')
            lIlllllllllI='https://cer'+llllllllIlll[0]
            lllllllllllI={'Accept':'application/json, text/plain, */*','Referer':'https://www.mitele.es'+llllllllll11['OOOOx00000000O000'][0].replace('/player/player','/player'),'Origin':'https://www.mitele.es','User-Agent':'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/77.0.3865.120 Safari/537.36','Sec-Fetch-Mode':'cors','Content-Type':'application/json;charset=UTF-8'}
            lIllllllllIl='{"bbx":"'+lllIllllllll+'","gbx":"'+lIllllllllll+'"}'
            lllllIllllll=requests.post(lIlllllllllI,headers=lllllllllllI,data=lIllllllllIl).text
            lllllllllIll=lllllIllllll.split('"cdn":"')
            llllllllIlll=lllllllllIll[1].split('"')
            lIlllllllIll=llllllllIlll[0]
            lIllllllIlll=llllIlllllll+'?'+lIlllllllIll
            lllllIllllll=requests.get(lIllllllIlll).text.split('#EXT-X-STREAM-INF:')
            for I1llllllllll in range(len(lllllIllllll)-1,0,-1):
                I1lllllllllI=lllllIllllll[I1llllllllll].split('RESOLUTION=')
                I1lllllllIll=I1lllllllllI[1].split(',')
                I1llllllllIl=I1lllllllIll[0]
                I1llllllllII=lllllIllllll[I1llllllllll].split("\n")
                lllllll1111l=xbmcgui.ListItem(I1llllllllIl+' | [B]'+llllllllll11['llllll11llll'][0].decode('utf-8')+'[/B]',iconImage=llllllllll11['l1111111111l'][0])
                lllllll1111l.setInfo(type="Video",infoLabels={"plot":llllllllll11['lll1111111ll'][0],"Title":'[B]'+llllllllll11['ll1111111111'][0]+'[/B]'})
                lllllll1111l.setArt({'poster':llllllllll11['l1111111111l'][0],'fanart':llllllllll11['l1111111111l'][0]})
                lllllll1111l.setProperty("IsPlayable","true")
                if 'https' in I1llllllllII[1]:
                    xbmcplugin.addDirectoryItem(handle=l1llllllllll,url=I1llllllllII[1],listitem=lllllll1111l,isFolder=False)
                else:
                    xbmcplugin.addDirectoryItem(handle=l1llllllllll,url=lIllllllIlll.replace('master.m3u8',I1llllllllII[1]),listitem=lllllll1111l,isFolder=False)                
        xbmcplugin.endOfDirectory(l1llllllllll)'))