import sys
import base64
exec(base64.b64decode('import xbmcgui
import xbmcplugin
import xbmc
import urllib
import urllib2
import urlparse
import json
import xbmcaddon
import os
import re
import random
import requests
import unicodedata
from lib import youtube_dl
from sqlite3 import dbapi2 as database
from types import UnicodeType
from F4mProxy import f4mProxyHelper
llllllllll=sys.argv[0]
llll111lll=int(sys.argv[1])
ll111111ll=urlparse.parse_qs(sys.argv[2][1:])
llllllll11=xbmcaddon.Addon()
lll11l1lll=llllllll11.getAddonInfo('path')
sys.path.append(xbmc.translatePath(os.path.join(lll11l1lll,'lib')))
lllllllll1=os.path.join(xbmc.translatePath("special://database"),'atresplayer.db')
lll11lllll=database.connect(lllllllll1)
ll1lllllll=lll11lllll.cursor()
def llllllll1l(llll11111l):
    try:
        llll11111l=unicode(llll11111l.encode("utf-8"),'utf-8')
    except NameError:
        pass
    llll11111l=unicodedata.normalize('NFD',llll11111l)\
           .encode('ascii','ignore')\
           .decode("utf-8")
    return str(llll11111l)
def ll11l1llll(l1l1llllll):
    lllllll1ll=llllllll1l(l1l1llllll)
    lllllll1ll=re.sub(r'[#\\/:"*?<>|]+',"",lllllll1ll)
    lllllll1ll="".join(i for i in lllllll1ll if ord(i)<128)
    lllllll1ll=' '.join(lllllll1ll.split())
    return lllllll1ll
def ll1l1lllll(l1l1llllll):
    return llllll1lll(l1l1llllll).encode('utf-8')
def llllll1lll(lllll1llll):
    if type(lllll1llll) is UnicodeType:
        return lllll1llll
    else:
        try:
            return unicode(lllll1llll,'utf-8')
        except:
            return unicode(lllll1llll,'iso-8859-1')
def lllll11l1l(llllll11l1):
    return llllllllll+'?'+urllib.urlencode(llllll11l1)
def llllll11ll(ll11llllll,lllll11lll):
    if lllll11lll==3:
        return ''
    else:
        llll11llll=0
        ll11llllll=ll11llllll.replace(' ','%20')
        ll1lllllll.execute("CREATE TABLE IF NOT EXISTS links (page_link TEXT, return_link TEXT, UNIQUE(page_link));")
        lll11lllll.commit()
        ll1lllllll.execute("SELECT return_link FROM links WHERE page_link = '"+ll11llllll+"'")
        l1llllllll=ll1lllllll.fetchone()
        if l1llllllll != None:
            xbmc.sleep(750)
            return l1llllllll[0]
        else:
            if llllllll11.getSetting('username')=='' or llllllll11.getSetting('password')=='':
                llll11llll=1
            else:
                try:
                    l11lllllll=youtube_dl.YoutubeDL({'outtmpl':u'%(id)s%(ext)s','username':llllllll11.getSetting('username'),'password':llllllll11.getSetting('password')})
                    lllllll111=l11lllllll.extract_info(ll11llllll,download=False)
                    if 'entries' in lllllll111:
                        lllllll11l=lllllll111['entries'][0]
                    else:
                        lllllll11l=lllllll111
                    llll1lllll=json.dumps(lllllll11l)
                    llllll111l=llll1lllll.split('.m3u8')
                    llll11l11l=llllll111l[len(llllll111l)-2].split('"')
                    lll11l11ll=llllll111l[len(llllll111l)-1].split('"')
                    lll1llllll=llll11l11l[len(llll11l11l)-1]+'.m3u8'
                    ll1lllllll.execute("INSERT INTO links VALUES ('"+ll11llllll+"', '"+lll1llllll+"');")
                    lll11lllll.commit()
                    return lll1llllll
                except Exception as e:
                    llll11llll=1
            if llll11llll==1:
                l11111111l={'Sec-Fetch-Mode':'cors','Origin':'https://eljaviero.com','Accept-Language':'es-ES,es;q=0.9','X-Requested-With':'XMLHttpRequest','Connection':'keep-alive','Pragma':'no-cache','User-Agent':'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/77.0.3865.120 Safari/537.36','Content-Type':'application/x-www-form-urlencoded; charset=UTF-8','Accept':'*/*','Cache-Control':'no-cache','Referer':'https://eljaviero.com/descargarvideosdelatele/download/','Sec-Fetch-Site':'same-origin'}
                l111111111=urllib.urlencode({'url_noticia':ll11llllll,'submit_enviar_url':'ok','current_url':'https://eljaviero.com/descargarvideosdelatele/download/'})
                ll1111llll=urllib2.Request("https://eljaviero.com/descargarvideosdelatele/index.php",data=l111111111,headers=l11111111l)
                ll11l11lll=json.loads(urllib2.urlopen(ll1111llll,timeout=60).read())
                if 'prueba de nuevo' in ll11l11lll['mensaje']:
                    lllll11lll=lllll11lll+1
                elif 'no parece que haya una' in ll11l11lll['mensaje']:
                    lllll11lll=lllll11lll+1
                else:
                    llllll111l=ll11l11lll['mensaje'].split('.f4m</div>')
                    llll11l11l=llllll111l[0].split('>')
                    ll11l111ll=llll11l11l[-1]+'.f4m'
                    if ll11l111ll=='.f4m':
                        llllll111l=ll11l11lll['mensaje'].split('<a href="')
                        llll11l11l=llllll111l[3].split('"')
                        l11111111l={'Sec-Fetch-Mode':'cors','Origin':'https://eljaviero.com','Accept-Language':'es-ES,es;q=0.9','X-Requested-With':'XMLHttpRequest','Connection':'keep-alive','Pragma':'no-cache','User-Agent':'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/77.0.3865.120 Safari/537.36','Content-Type':'application/x-www-form-urlencoded; charset=UTF-8','Accept':'*/*','Cache-Control':'no-cache','Referer':llll11l11l[0],'Sec-Fetch-Site':'same-origin'}
                        l111111111=urllib.urlencode({'url_noticia':ll11llllll,'submit_enviar_url':'ok','current_url':llll11l11l[0]})
                        ll1111llll=urllib2.Request("https://eljaviero.com/descargarvideosdelatele/index.php",data=l111111111,headers=l11111111l)
                        ll11l11lll=json.loads(urllib2.urlopen(ll1111llll,timeout=60).read())
                        if 'prueba de nuevo' in ll11l11lll['mensaje']:
                            lllll11lll=lllll11lll+1
                        else:
                            llllll111l=ll11l11lll['mensaje'].split('.m3u8')
                            llll11l11l=llllll111l[0].split('>')
                            lll11l11ll=llllll111l[1].split('<')
                            lll11l1111=llll11l11l[-1]+'.m3u8'+lll11l11ll[0]
                            l11l111lll=lll11l1111.replace('/vcgdrm/','/vcg/')
                            ll1lllllll.execute("INSERT INTO links VALUES ('"+ll11llllll+"', '"+l11l111lll+"');")
                            lll11lllll.commit()
                            return l11l111lll
                    else:
                        ll1lllllll.execute("INSERT INTO links VALUES ('"+ll11llllll+"', '"+ll11l111ll+"');")
                        lll11lllll.commit()
                        return ll11l111ll
                if lllll11lll > 0:
                    xbmc.sleep(random.randint(100,650))
                    return llllll11ll(ll11llllll,lllll11lll)
lll111llll=ll111111ll.get('lll111llll',None)
if lll111llll is None:
    ll1111llll=urllib2.Request('https://www.atresplayer.com/')
    ll11l1111l=urllib2.urlopen(ll1111llll).read()
    l11l1111ll=[]
    llllll111l=ll11l1111l.split('SiteNavigationElement","name":"')
    for ll11l11111 in range(1,len(llllll111l)):
        llll11l11l=llllll111l[ll11l11111].split('"')
        lll11l11ll=llllll111l[ll11l11111].split(',"url":"')
        lll11l111l=lll11l11ll[1].split('"')
        l11l1111ll.append({'llll11l111':ll1l1lllll(llll11l11l[0]),'llll11l1ll':lll11l111l[0].replace('\\u002F','/')})
    for lllll111ll in l11l1111ll:
        llll11l1ll=lllll11l1l({'lll111llll':'l1Il1Illll','l111111lll':lllll111ll['llll11l111'],'ll11111111':lllll111ll['llll11l1ll']})
        l11l11llll=xbmcgui.ListItem(lllll111ll['llll11l111'],iconImage=lll11l1lll+'/icon.png')
        l11l11llll.setInfo(type="Video",infoLabels={"plot":lllll111ll['llll11l111']})
        l11l11llll.setArt({'fanart':lll11l1lll+'/fanart.jpg'})
        xbmcplugin.addDirectoryItem(handle=llll111lll,url=llll11l1ll,listitem=l11l11llll,isFolder=True)
    xbmcplugin.endOfDirectory(llll111lll)
elif lll111llll[0]=='l1Il1Illll':
    ll1111llll=urllib2.Request(ll111111ll['ll11111111'][0])
    ll111lllll=urllib2.urlopen(ll1111llll).read()
    llllll111l=ll111lllll.split('"redirect":false,"href":"')
    llll11l11l=llllll111l[1].split('"')
    lll11l11ll=llll11l11l[0].split('channel\u002F')
    lll11l111l=lll11l11ll[1].split('?')
    l111llllll=lll11l111l[0]
    l11l1111I1=llll11l11l[0].split('categoryId=')
    lll1l1llll=l11l1111I1[1]
    ll1111llll=urllib2.Request('https://api.atresplayer.com/client/v1/row/search?entityType=ATPFormat&sectionCategory=true&mainChannelId='+l111llllll+'&categoryId='+lll1l1llll+'&sortType=AZ&size=100&page=0')
    llllll1111=json.loads(urllib2.urlopen(ll1111llll).read())
    l1111111ll=[]
    for lllll111ll in llllll1111['itemRows']:
        l1111111ll.append({"llll1l1lll":lllll111ll['formatId'],"l111111lll":ll1l1lllll(lllll111ll['title']),"lllll1l1ll":lllll111ll['image']['pathHorizontal'],"ll11111111":ll1l1lllll(lllll111ll['link']['url']),"lll1111111":ll11l1llll(lllll111ll['title']).lower()})
    lllll1111l=int(llllll1111['pageInfo']['totalPages'])
    if lllll1111l > 0:
        for ll11l11111 in range(1,lllll1111l):
            ll1111llll=urllib2.Request('https://api.atresplayer.com/client/v1/row/search?entityType=ATPFormat&sectionCategory=true&mainChannelId='+l111llllll+'&categoryId='+lll1l1llll+'&sortType=AZ&size=100&page='+str(ll11l11111))
            llllll1111=json.loads(urllib2.urlopen(ll1111llll).read())
            for lllll111ll in llllll1111['itemRows']:
                l1111111ll.append({"llll1l1lll":lllll111ll['formatId'],"l111111lll":ll1l1lllll(lllll111ll['title']),"lllll1l1ll":lllll111ll['image']['pathHorizontal'],"ll11111111":ll1l1lllll(lllll111ll['link']['url']),"lll1111111":ll11l1llll(lllll111ll['title']).lower()})
    l1111111ll=sorted(l1111111ll,key=lambda i:i['lll1111111'],reverse=False)
    for lllll111ll in l1111111ll:
        llll11l1ll=lllll11l1l({'lll111llll':'ll1111111l','l111111lll':lllll111ll['l111111lll'],'ll11111111':lllll111ll['ll11111111'],'llll1l1lll':lllll111ll['llll1l1lll']})
        l11l11llll=xbmcgui.ListItem(lllll111ll['l111111lll'],iconImage=lllll111ll['lllll1l1ll'])
        l11l11llll.setInfo(type="Video",infoLabels={"plot":lllll111ll['l111111lll']})
        l11l11llll.setArt({'fanart':lllll111ll['lllll1l1ll']})
        xbmcplugin.addDirectoryItem(handle=llll111lll,url=llll11l1ll,listitem=l11l11llll,isFolder=True)
    xbmcplugin.endOfDirectory(llll111lll)
elif lll111llll[0]=='ll1111111l':
    ll1111llll=urllib2.Request('https://api.atresplayer.com/client/v1/row/search?entityType=ATPEpisode&formatId='+ll111111ll['llll1l1lll'][0]+'&size=100&page=0')
    lllllll1l1=urllib2.urlopen(ll1111llll).read()
    llll1111ll=json.loads(lllllll1l1)
    lll1111lll=[]
    if 'itemRows' in llll1111ll:
        for lllll111ll in llll1111ll['itemRows']:
            l11l1lllll=''
            if 'tagType' in lllll111ll:
                l11l1lllll='[P]'
            lll1111lll.append({"l111111lll":ll1l1lllll(lllll111ll['title']),"llllll1l1l":ll1l1lllll(lllll111ll['subTitle']),"lllll1l1ll":lllll111ll['image']['pathHorizontal'],"ll11111111":ll1l1lllll(lllll111ll['link']['url']),"lllll11l11":l11l1lllll})
        lllll1111l=int(llll1111ll['pageInfo']['totalPages'])
        if lllll1111l > 0:
            for ll11l11111 in range(1,lllll1111l):
                ll1111llll=urllib2.Request('https://api.atresplayer.com/client/v1/row/search?entityType=ATPEpisode&formatId='+ll111111ll['llll1l1lll'][0]+'&size=100&page='+str(ll11l11111))
                llll1111ll=json.loads(urllib2.urlopen(ll1111llll).read())
                for lllll111ll in llll1111ll['itemRows']:
                    l11l1lllll=''
                    if 'tagType' in lllll111ll:
                        l11l1lllll='[P]'
                    lll1111lll.append({"l111111lll":ll1l1lllll(lllll111ll['title']),"llllll1l1l":ll1l1lllll(lllll111ll['subTitle']),"lllll1l1ll":lllll111ll['image']['pathHorizontal'],"ll11111111":ll1l1lllll(lllll111ll['link']['url']),"lllll11l11":l11l1lllll})
        for lllll111ll in lll1111lll:
            llll11l1ll=lllll11l1l({'lll111llll':'l11l111I11','l111111lll':lllll111ll['l111111lll'],'ll11111111':lllll111ll['ll11111111'],'lllll1l1ll':lllll111ll['lllll1l1ll']})
            l11l11llll=xbmcgui.ListItem(lllll111ll['l111111lll'],iconImage=lllll111ll['lllll1l1ll'])
            l11l11llll.setInfo(type="Video",infoLabels={"plot":lllll111ll['l111111lll']})
            l11l11llll.setArt({'fanart':lllll111ll['lllll1l1ll']})
            xbmcplugin.addDirectoryItem(handle=llll111lll,url=llll11l1ll,listitem=l11l11llll,isFolder=True)
        xbmcplugin.endOfDirectory(llll111lll)
    else:
        xbmc.executebuiltin('XBMC.Notification(%s,%s,%s,%s)' % ('No hay videos','No se han encontrado videos para este programa',4000,lll11l1lll+'/icon.png'))
elif lll111llll[0]=='l11l111I11':
    lllllll11l=llllll11ll('https://www.atresplayer.com'+ll111111ll['ll11111111'][0],0)
    if lllllll11l=='':
        xbmc.executebuiltin('XBMC.Notification(%s,%s,%s,%s)' % ('Video no accesible',"Puede que sea muy nuevo o que aun no se haya emitido. Prueba mas adelante.",15000,lll11l1lll+'/icon.png'))
    else:
        l1111lllll=requests.get(lllllll11l).text
        if '.m3u8' in lllllll11l:
            lll11111ll=xbmcgui.ListItem(ll111111ll['l111111lll'][0])
            lll11111ll.setInfo('video',{'Title':ll111111ll['l111111lll'][0]})
            xbmc.Player().play(lllllll11l,lll11111ll)
        else:
            l11111llll=[]
            lllll11111=f4mProxyHelper()
            llll111111,lllll111ll=lllll11111.playF4mLink(lllllll11l,ll111111ll['l111111lll'][0],None,True,0,False,'','HDS',True,None,'','',ll111111ll['lllll1l1ll'][0])
            lllll111ll.setProperty("IsPlayable","true")
            llll11l11l=l1111lllll.split('bitrate="')
            lll111111l=lllll111ll.getLabel().decode('utf8')
            for l11l11111l in range(1,len(llll11l11l)):
                lll11l11ll=llll11l11l[l11l11111l].split('"')
                l11111llll.append({'l11l11111I':int(lll11l11ll[0])})
            l11111llll=sorted(l11111llll,key=lambda i:i['l11l11111I'],reverse=True)
            for ll11111lll in l11111llll:
                lllll111ll.setLabel('[B]'+lll111111l+'[/B] | '+str(ll11111lll['l11l11111I'])+' kbps')
                lllll111ll.setInfo(type="Video",infoLabels={"plot":ll111111ll['l111111lll'][0]})
                lllll111ll.setArt({'fanart':ll111111ll['lllll1l1ll'][0]})
                lllll111ll.setProperty("IsPlayable","true")
                xbmcplugin.addDirectoryItem(handle=llll111lll,url=llll111111.replace('maxbitrate=0','maxbitrate='+str(ll11111lll['l11l11111I'])),listitem=lllll111ll,isFolder=False)
            xbmcplugin.endOfDirectory(llll111lll)'))